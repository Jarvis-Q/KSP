#!/usr/bin/env node

var program = require( 'commander' );
var Util = require( '../lib/util' );
var PackageBuilder = require( '../lib/packageBuilder');
var Log = require( '../lib/log' );
var updateKSP = require( '../lib/updateKSP' );

// KSP info.
var packageInfo = require( '../package.json' );

program
    // Set version.
    .version( packageInfo.version )
    .usage('[options] [command]')
    .option('-w, --wrapConfig', 'Wrap output code with KISSY package configuration.')
    .option('-c, --compress', 'Compress output code with UglifyJS.')
    .option('-s, --silent', 'Silent all the log.')
    .option('-u, --update', 'Update KSP to latest version.');

program.on('--help', function(){
    console.log('  Commands:');
    console.log('');
    console.log('    init :  Setup `ksp.json` automatically.');
    console.log('');
});

// Parse the arguments.
program.parse(process.argv);

// If silent is set, than silent the log.
if( program.silent === true ){
    Log.level = 'silent';
}

// === Log ===
Log.info( 'Success if end up with:', 'OK' );

// Args command get a higher priority.
var args = program.args;
if( args.length > 0 ){
    var commandName = args[ 0 ];
    try{
        require( './' + commandName).command( program );
    }
    catch(e) {
        Log.error( 'UnKnow command:', commandName );
        process.exit( 1 );
    }
    return;
}

// If update `ksp`
if( program.update ===  true ){
    updateKSP();
    return;
}

// Get KSP config, if Fail, terminal this task.
var kspConfig = Util.parseConfig();

// === Log ===
Log.info( 'Building......' );

kspConfig.main.forEach(function( mainPath ){

    // === Log ===
    Log.info( 'Building main module:', mainPath );

    PackageBuilder( kspConfig, mainPath, {
        ifComboConfig: program.wrapConfig,
        ifCompress: program.compress
    });
});

// === Log ===
// Success!
Log.info( 'OK' );